Singly LinkedList
==================
Q# Introduction to Linked List
Q# Linked List vs Array
Q# Linked List Insertion
Q# Linked List Deletion (Deleting a given key)
Q# Linked List Deletion (Deleting a key at given position)
Q# A Programmer’s approach of looking at Array vs. Linked List
Q# Find Length of a Linked List (Iterative and Recursive)
Q# Search an element in a Linked List (Iterative and Recursive)
Q# How to write C functions that modify head pointer of a Linked List?
Q# Swap nodes in a linked list without swapping data
Q# Write a function to get Nth node in a Linked List
Q# Print the middle of a given linked list
Q# Nth node from the end of a Linked List
Q# Write a function to delete a Linked List
Q# Write a function that counts the number of times a given int occurs in a Linked List
Q# Reverse a linked list
Q# Detect loop in a linked list
Q# Merge two sorted linked lists
Q# Generic Linked List in C
Q# Given a linked list which is sorted, how will you insert in sorted way
Q# Given only a pointer to a node to be deleted in a singly linked list, how do you delete it?
Q# Function to check if a singly linked list is palindrome
Q# Intersection point of two Linked Lists.
Q# Recursive function to print reverse of a Linked List
Q# Remove duplicates from a sorted linked list
Q# Remove duplicates from an unsorted linked list
Q# Pairwise swap elements of a given linked list
Q# Practice questions for Linked List and Recursion
Q# Move last element to front of a given Linked List
Q# Intersection of two Sorted Linked Lists
Q# Delete alternate nodes of a Linked List
Q# Alternating split of a given Singly Linked List
Q# Identical Linked Lists
Q# Merge Sort for Linked Lists
Q# Reverse a Linked List in groups of given size
Q# Reverse alternate K nodes in a Singly Linked List
Q# Delete nodes which have a greater value on right side
Q# Segregate even and odd nodes in a Linked List
Q# Detect and Remove Loop in a Linked List
Q# Add two numbers represented by linked lists | Set 1
Q# Delete a given node in Linked List under given constraints
Q# Union and Intersection of two Linked Lists
Q# Find a triplet from three linked lists with sum equal to a given number
Q# Rotate a Linked List
Q# Flattening a Linked List
Q# Add two numbers represented by linked lists | Set 2
Q# Sort a linked list of 0s, 1s and 2s
Q# Flatten a multilevel linked list
Q# Delete N nodes after M nodes of a linked list
Q# QuickSort on Singly Linked List
Q# Merge a linked list into another linked list at alternate positions
Q# Pairwise swap elements of a given linked list by changing links
Q# Given a linked list of line segments, remove middle points
Q# Construct a Maximum Sum Linked List out of two Sorted Linked Lists having some Common nodes
Q# Can we reverse a linked list in less than O(n)?
Q# Clone a linked list with next and random pointer | Set 1
Q# Clone a linked list with next and random pointer | Set 2
Q# Insertion Sort for Singly Linked List
Q# Point to next higher value node in a linked list with an arbitrary pointer
Q# Rearrange a given linked list in-place.
Q# Sort a linked list that is sorted alternating ascending and descending orders?
Q# Select a Random Node from a Singly Linked List
Q# Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?
Q# Merge two sorted linked lists such that merged list is in reverse order
Q# Compare two strings represented as linked lists
Q# Rearrange a linked list such that all even and odd positioned nodes are together
Q# Rearrange a Linked List in Zig-Zag fashion
Q# Add 1 to a number represented as linked list
Q# Point arbit pointer to greatest value right side node in a linked list
Q# Merge two sorted linked lists such that merged list is in reverse order
Q# Convert a given Binary Tree to Doubly Linked List | Set
Q# Check if a linked list of strings forms a palindrome
Q# Sort linked list which is already sorted on absolute values
Q# Delete last occurrence of an item from linked list
Q# Delete a Linked List node at a given position
Q# Linked List in java

Circular Linked List:
======================
Q# Circular Linked List Introduction and Applications,
Q# Circular Linked List Traversal
Q# Split a Circular Linked List into two halves
Q# Sorted insert for circular linked list

Doubly Linked List:
===================
Q# Doubly Linked List Introduction and Insertion
Q# Delete a node in a Doubly Linked List
Q# Reverse a Doubly Linked List
Q# The Great Tree-List Recursion Problem.
Q# Copy a linked list with next and arbit pointer
Q# QuickSort on Doubly Linked List
Q# Swap Kth node from beginning with Kth node from end in a Linked List
Q# Merge Sort for Doubly Linked List